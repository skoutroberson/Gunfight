// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "SharedSpacesFunctionLibrary.generated.h"


DECLARE_LOG_CATEGORY_EXTERN(LogSharedSpaces, Log, All);

UCLASS()
class GUNFIGHT_API USharedSpacesFunctionLibrary : public UBlueprintFunctionLibrary
{
	GENERATED_BODY()
	
public:

	/**
	 * Utility to add quotation marks to the supplied deeplink so that the JSCON reader can parse it correctly.
	 * @param DeepLink - Deeplink to parse.
	 * @return A string.
	 */
	UFUNCTION(BlueprintCallable, Category = "SharedSpaces|LaunchDeeplink")
	static FString AddQuotationMarks(const FString& DeepLink);

	/**
	 * Utility to retrieve whether IsLobby is true in the supplied deeplink.
	 * @param DeepLink - Deeplink to parse.
	 * @param bisLobby - Boolean with the result.
	 */
	UFUNCTION(BlueprintCallable, Category = "SharedSpaces|LaunchDeeplink")
	static void GetIsLobby(const FString& DeepLink, bool& bIsLobby);

	/**
	 * Utility to retrieve the launchmap from the supplied deeplink.
	 * @param DeepLink - Deeplink to parse.
	 * @param HasMapName - Boolean indicating if the map attribute was found.
	 * @param MapName - The name of map if found.
	 */
	UFUNCTION(BlueprintCallable, Category = "SharedSpaces|LaunchDeeplink")
	static void GetLaunchMap(const FString& DeepLink, const FString& OptionalDefaultMapName, bool& HasMapName, FString& MapName);

	/**
	 * Utility to retrieve the public room name attribute from the supplied deeplink.
	 * @param DeepLink - Deeplink to parse.
	 * @param HasPublicRoomName - Boolean indicating if public room name was found in the link.
	 * @param PublicRoomName - The name of the public room to use if found.
	 */
	UFUNCTION(BlueprintCallable, Category = "SharedSpaces|LaunchDeeplink")
	static void GetPublicRoomName(const FString& DeepLink, bool& HasPublicRoomName, FString& PublicRoomName);

	/**
	 * Utility that returns the location/rotation of the local player in string form.
	 * @return A string.
	 */
	UFUNCTION(BlueprintCallable, Category = "SharedSpaces|Spawn")
	static FString GetLocalCharacterLocationAndRotation();

	/**
	 * Utility that parses the string generated by GetLocalCharacterLocationAndRotation().
	 * @param LocationAndRotationString - The location/rotation string to parse.
	 * @param Location - The parsed location.
	 * @param Rotation - The parsed rotation.
	 * @return A boolean indicating whether the parsing was successful.
	 */
	UFUNCTION(BlueprintCallable, Category = "SharedSpaces|Spawn")
	static UPARAM(DisplayName = "IsValid") bool ParseLocationAndRotation(const FString& LocationAndRotationString, FVector& Location, FRotator& Rotation);

	/**
	 * SharedSpaces log.
	 * @param Message
	 */
	UFUNCTION(BlueprintCallable, Category = "SharedSpaces|Log")
	static void SystemLog(const FString& Message);
};
